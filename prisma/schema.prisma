// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output          = "./generated/edge"
  previewFeatures = ["deno"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  password      String?
  phoneNumber   String?
  showAPIDocs   Boolean    @default(false)
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  business      Business[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Business {
  id             String           @id @default(uuid())
  name           String
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           User             @relation(fields: [userId], references: [id])
  Tenant         Tenant[]
  Property       Property[]
  RentalProperty RentalProperty[]
}

model Tenant {
  id               String           @id @default(uuid())
  cinOrPassport    String           @unique
  isTourist        Boolean          @default(false)
  name             String
  email            String           @unique
  phoneNumber      String
  address          String
  dateOfBirth      DateTime
  payments         Payment[]
  rentalProperties RentalProperty[]
  businessId       String
  business         Business         @relation(fields: [businessId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Property {
  id                String           @id @default(uuid())
  name              String
  address           String
  type              PropertyType
  dailyRentalCost   Float
  monthlyRentalCost Float
  rentalUnits       RentalProperty[] // Relation to RentalProperty model
  isAvailable       Boolean          @default(true)
  units             Unit[]
  businessId        String
  business          Business         @relation(fields: [businessId], references: [id])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("properties")
}

model Unit {
  id          String   @id @default(uuid())
  number      String // Unit number or identifier (e.g., apartment number)
  isAvailable Boolean  @default(true) // Availability status
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])

  @@map("units") // Map this model to the "units" table in the database
}

enum PropertyType {
  APARTMENT
  HOUSE
  OFFICE
  OTHER
}

model RentalProperty {
  id          String   @id @default(uuid())
  propertyId  String
  unit        String // Specific unit within the property
  rentalCost  Float
  tenantId    String
  totalAmount Float // Total amount for the rental period
  startDate   DateTime // Start date of the rental period
  endDate     DateTime // End date of the rental period
  businessId  String

  tenant   Tenant   @relation(fields: [tenantId], references: [id])
  business Business @relation(fields: [businessId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id       String   @id @default(uuid())
  tenantId String
  amount   Float
  datePaid DateTime
  settled  Boolean  @default(false) // True if payment is settled, false otherwise

  tenant Tenant @relation(fields: [tenantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
